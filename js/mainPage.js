// Generated by CoffeeScript 1.4.0
(function() {
  var $, Access, AccessBean, App, DataBase, Feed, FeedsBean, GoogleChromeApp, Icon, Options, Popup, app, icon, newPosts,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  newPosts = 0;

  icon = null;

  app = null;

  Access = (function() {

    function Access() {}

    Access.maxFeeds = 100;

    Access.naoLidos = 0;

    Access.fontesDeFeeds = '';

    Access.user = '';

    Access.mail = '';

    return Access;

  })();

  Icon = (function() {

    Icon.icons = ["img/19.png"];

    function Icon() {
      this.update = __bind(this.update, this);

      var _this = this;
      this.canvas = document.getElementById("logo");
      this.context = this.canvas.getContext('2d');
      this.image = new Image();
      this.image.onload = function(e) {
        return _this.update();
      };
      this.image.src = Icon.icons[0];
      this.blend = 0;
      this.cBlend = 0;
      this.timmerID = null;
    }

    Icon.prototype.update = function() {
      var nPosts;
      this.context.save();
      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.context.drawImage(this.image, 0, 0);
      if (newPosts > 0) {
        nPosts = newPosts;
        if (nPosts >= 100) {
          nPosts = "99+";
        }
        this.context.fillStyle = "#fa0";
        this.context.font = "bold 10px Arial";
        this.context.textAlign = "right";
        this.context.fillStyle = "#200";
        this.context.fillText(nPosts, 18, 13);
        this.context.fillStyle = "#EEEE00";
        this.context.fillText(nPosts, 17, 12);
      }
      this.context.restore();
      return chrome.browserAction.setIcon({
        imageData: this.context.getImageData(0, 0, this.canvas.width, this.canvas.height)
      });
    };

    Icon.reset = function() {
      return chrome.browserAction.setIcon({
        "path": Icon.icons[0]
      });
    };

    return Icon;

  })();

  DataBase = (function() {

    DataBase.instance = null;

    DataBase.transaction = null;

    function DataBase() {
      DataBase.instance = this;
      this.db = window.openDatabase("rpgvale_feed", "2.0", "rpgvalefeed", 4 * 1024 * 1024, function(error) {
        return console.log("CREATE DB " + error.message);
      });
      if (this.db === null) {
        console.log("nao consigo abrir db");
      }
      this.db.transaction((function(tx) {
        return tx.executeSql("CREATE TABLE IF NOT EXISTS posts ( " + "_id INTEGER NOT NULL, " + "title TEXT NOT NULL," + "pubDate TEXT NOT NULL," + "author TEXT NULL," + "image TEXT NULL," + "link TEXT NOT NULL," + "description TEXT NULL," + "naoLido INTEGER NOT NULL DEFAULT 1" + ");");
      }), function(error) {
        return console.log("CREATE TABLE " + error.message);
      });
      this.db.transaction((function(tx) {
        return tx.executeSql("CREATE TABLE IF NOT EXISTS access ( " + "naoLidos INTEGER NOT NULL, " + "user TEXT NULL," + "mail TEXT NULL," + "maxFeeds INTEGER NOT NULL DEFAULT 100," + "fontes TEXT NULL" + ");");
      }), function(error) {
        return console.log("CREATE TABLE " + error.message);
      });
      DataBase.transaction = this.m_transaction;
    }

    DataBase.prototype.m_transaction = function(query, data, callBack) {
      var _this = this;
      return DataBase.instance.db.transaction((function(tx) {
        return tx.executeSql(query, data, (function(tx, result) {
          if (callBack !== void 0) {
            return callBack(tx, result);
          }
        }));
      }), function(error) {
        return console.log("ERRO: " + error.message);
      });
    };

    return DataBase;

  })();

  FeedsBean = (function() {

    function FeedsBean() {}

    FeedsBean.clearDataBase = function() {
      return DataBase.transaction("DELETE FROM posts", []);
    };

    FeedsBean.getFeedsNaoLidos = function() {
      return DataBase.transaction("SELECT COUNT(*) AS total FROM posts WHERE naoLido=1", [], (function(tx, result) {
        newPosts = parseInt(result.rows.item(0).total);
        return icon.update();
      }));
    };

    FeedsBean.addPost = function(i, item) {
      var _this = this;
      return DataBase.instance.db.transaction((function(tx) {
        var tm;
        tm = item.pubDate;
        if (item.pubDate.getTime) {
          tm = item.pubDate.getTime();
        }
        return tx.executeSql("INSERT INTO posts (_id,title,pubDate,author,image,link,description) VALUES(?,?,?,?,?,?,?)", [i, item.title, tm, item.author, item.image, item.link, item.description], (function(tx, result) {
          return tx.executeSql("SELECT COUNT(_id) AS total FROM posts", [], (function(tx, result) {
            if (parseInt(result.rows.item(0).total) > Access.maxFeeds) {
              console.log("total de feeds atingido");
              return tx.executeSql("DELETE FROM posts WHERE pubDate = (SELECT MIN(pubDate) FROM posts)", [], null);
            }
          }));
        }));
      }));
    };

    FeedsBean.readPosts = function(callBack, data) {
      var _this = this;
      return DataBase.instance.db.transaction((function(tx) {
        return tx.executeSql("SELECT * FROM posts ORDER BY pubDate DESC", [], (function(tx, result) {
          var i, posts, _fn, _i, _ref;
          posts = [];
          if (result.rows.length > 0) {
            _fn = function(i) {
              return posts.push(result.rows.item(i));
            };
            for (i = _i = 0, _ref = result.rows.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              _fn(i);
            }
          }
          return callBack(posts, data);
        }));
      }), function(error) {
        return console.log("SELECT readPosts" + error.message);
      });
    };

    FeedsBean.insertPosts = function(itens) {
      var _this = this;
      return DataBase.transaction("DELETE FROM posts", [], (function(tx, result) {
        var i, item, _fn, _i, _len;
        i = 1;
        _fn = function(item) {
          FeedsBean.addPost(i, item);
          return i += 1;
        };
        for (_i = 0, _len = itens.length; _i < _len; _i++) {
          item = itens[_i];
          _fn(item);
        }
        return window.setTimeout(FeedsBean.getFeedsNaoLidos, 2000);
      }));
    };

    FeedsBean.getDuplicate = function(callBack) {
      return DataBase.transaction("SELECT _id,pubDate FROM posts WHERE pubDate in (SELECT pubDate FROM posts GROUP BY pubDate HAVING COUNT(*)>1) ORDER BY _id", [], callBack);
    };

    FeedsBean.deleteEntry = function(_id) {
      return DataBase.transaction("DELETE FROM posts WHERE _id=" + _id, []);
    };

    FeedsBean.markAllAsARead = function() {
      return DataBase.transaction("UPDATE posts SET naoLido=0", []);
    };

    return FeedsBean;

  })();

  AccessBean = (function() {

    function AccessBean() {}

    AccessBean.getData = function(callBack) {
      var _this = this;
      return DataBase.transaction("SELECT * FROM access LIMIT 1", [], (function(tx, result) {
        if (result.rows.length > 0) {
          Access.maxFeeds = result.rows.item(0).maxFeeds;
          newPosts = Access.naoLidos = result.rows.item(0).naoLidos;
          Access.user = result.rows.item(0).user;
          Access.mail = result.rows.item(0).mail;
          Access.fontesDeFeeds = result.rows.item(0).fontes;
        }
        return callBack();
      }));
    };

    AccessBean.getMaxFeeds = function() {
      return DataBase.instance.db.transaction((function(tx) {
        return tx.executeSql("SELECT maxFeeds FROM access", [], (function(tx, result) {
          var maxFeeds;
          if (result.rows.length === 0) {
            return AccessBean.createAccess();
          } else {
            return maxFeeds = parseInt(result.rows.item(0).maxFeeds);
          }
        }));
      }), null);
    };

    AccessBean.createAccess = function() {
      var _this = this;
      return DataBase.instance.db.transaction((function(tx) {
        return tx.executeSql("INSERT INTO access (naoLidos,user,mail,fontes) VALUES(?,?,?,?)", [0, "", "", Access.fontesDeFeeds], (function() {
          return AccessBean.getFeedsNaoLidos();
        }));
      }), function(error) {
        return console.log("access: " + error.message);
      });
    };

    AccessBean.saveAccess = function(moreFeeds, maxFeeds, user, mail) {
      var _this = this;
      return DataBase.transaction("DELETE FROM access", [], (function(tx, result) {
        if (user === void 0) {
          user = "";
        }
        if (mail === void 0) {
          mail = "";
        }
        return DataBase.transaction("INSERT INTO access (naoLidos,user,mail,maxFeeds,fontes) VALUES(?,?,?,?,?)", [0, user, mail, maxFeeds, moreFeeds]);
      }));
    };

    return AccessBean;

  })();

  Feed = (function() {

    function Feed(url, callBack) {
      this.get = __bind(this.get, this);

      this.loaded = __bind(this.loaded, this);

      this.error = __bind(this.error, this);
      this.doc = null;
      this.callBack = callBack;
      this.itens = [];
      this.canalImage = "";
      $.ajax({
        url: url,
        dataType: "xml",
        "error": this.error,
        success: this.loaded,
        contentType: "text/xml; charset=UTF-8",
        processData: false,
        converters: {
          "* text": window.String
        }
      });
    }

    Feed.prototype.error = function(error) {
      return this.callBack(this);
    };

    Feed.prototype.loaded = function(data, textStatus, jqXHR) {
      var cImage, dt, imageURL, item, _fn, _i, _len, _ref,
        _this = this;
      if (textStatus === 'success') {
        cImage = $(data).find("image");
        try {
          if (cImage) {
            imageURL = $(cImage[0]).find("url");
            if (imageURL) {
              if (imageURL[0].firstChild === void 0) {
                dt = imageURL[0].nodeValue;
              } else {
                dt = imageURL[0].firstChild.nodeValue;
              }
            } else {
              dt = cImage[0].firstChild.nodeValue;
            }
          } else {
            dt = "";
          }
        } catch (err) {
          dt = "";
        }
        this.canalImage = dt;
        _ref = $(data).find("item");
        _fn = function(item) {
          var entry;
          entry = {
            title: _this.get(item, "title"),
            description: _this.convChars(_this.get(item, "description")),
            pubDate: new Date(_this.get(item, "pubDate")),
            link: _this.get(item, "link"),
            author: _this.get(item, "author"),
            image: null
          };
          entry.image = _this.getFirstImage(entry.description);
          return _this.itens.push(entry);
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _fn(item);
        }
      }
      return this.callBack(this);
    };

    Feed.prototype.convChars = function(str) {
      return str.replace(/&amp;/g, "&").replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, "\"");
    };

    Feed.prototype.getFirstImage = function(str) {
      var a, match;
      match = /<img[^>]*/i.exec(str);
      if (match) {
        a = String(match);
        a = a.substring(5 + a.indexOf("src=\""));
        a = a.substring(0, a.indexOf("\""));
        return a;
      }
      return "";
    };

    Feed.prototype.get = function(dt, name) {
      var o;
      try {
        o = $(dt).find(name);
        if (o) {
          if (o[0]) {
            return o[0].firstChild.nodeValue;
          }
        }
      } catch (error) {
        return "";
      }
      return "";
    };

    return Feed;

  })();

  GoogleChromeApp = (function() {

    function GoogleChromeApp() {
      this.scheduleRequest = __bind(this.scheduleRequest, this);

      this.onWatchdog = __bind(this.onWatchdog, this);

      this.onAlarm = __bind(this.onAlarm, this);

      this.onInit = __bind(this.onInit, this);

      this.onInstalled = __bind(this.onInstalled, this);

      this.prepareEvents = __bind(this.prepareEvents, this);
      this.timmerID;
      this.requestInProgress = false;
      this.icon = new Icon();
      this.oldChromeVersion = !chrome.runtime;
      this.prepareEvents();
      this.onInit();
    }

    GoogleChromeApp.prototype.prepareEvents = function() {
      if (this.oldChromeVersion) {
        this.onInstalled();
        return chrome.windows.onCreated.addListener(onInit);
      } else {
        chrome.runtime.onInstalled.addListener(this.onInstalled);
        chrome.runtime.onStartup.addListener(this.onInit);
        return chrome.alarms.onAlarm.addListener(this.onAlarm);
      }
    };

    GoogleChromeApp.prototype.onInstalled = function() {};

    GoogleChromeApp.prototype.onInit = function() {};

    GoogleChromeApp.prototype.onAlarm = function(alarm) {};

    GoogleChromeApp.prototype.onWatchdog = function() {};

    GoogleChromeApp.prototype.scheduleRequest = function(delay) {
      if (this.oldChromeVersion) {
        window.clearTimeout(this.timmerID);
        return this.timmerID = window.setTimeout(this.onAlarm, delay);
      } else {
        return chrome.alarms.create('refresh', {
          "when": Date.now() + delay
        });
      }
    };

    return GoogleChromeApp;

  })();

  App = (function(_super) {

    __extends(App, _super);

    function App() {
      this.onWatchdog = __bind(this.onWatchdog, this);

      this.onAlarm = __bind(this.onAlarm, this);

      this.onInit = __bind(this.onInit, this);

      this.confereDuplicados = __bind(this.confereDuplicados, this);

      this.conferePosts = __bind(this.conferePosts, this);

      this.feedCallback = __bind(this.feedCallback, this);

      this.run_2 = __bind(this.run_2, this);

      this.run = __bind(this.run, this);

      this.updateFeedList = __bind(this.updateFeedList, this);

      this.requestListener = __bind(this.requestListener, this);
      this.tdelay = 15 * 60 * 1000;
      this.popup = new Popup(false);
      chrome.browserAction.onClicked.addListener(this.popup.show);
      chrome.runtime.onMessage.addListener(this.requestListener);
      App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.requestListener = function(request, sender, sendResponse) {
      if (request.action === 'g_markAllAsARead') {
        FeedsBean.markAllAsARead();
        newPosts = 0;
        return icon.update();
      }
    };

    App.prototype.updateFeedList = function() {
      var fonte, _i, _len, _ref, _results,
        _this = this;
      this.feeds = ["http://feeds.feedburner.com/RpgVale?format=xml"];
      this.feedsLoaded = 0;
      this.feedsToLoad = 1;
      _ref = Access.fontesDeFeeds.split("\n");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fonte = _ref[_i];
        _results.push((function(fonte) {
          if (fonte.length > 5) {
            if (fonte.indexOf("#") !== 0) {
              if (fonte.indexOf("http://") === -1) {
                fonte = "http://" + fonte;
              }
              if (fonte.indexOf("?format=xml") === -1) {
                fonte += "?format=xml";
              }
              return _this.feeds.push(fonte);
            }
          }
        })(fonte));
      }
      return _results;
    };

    App.prototype.run = function() {
      return AccessBean.getData(this.run_2);
    };

    App.prototype.run_2 = function() {
      var f, _i, _len, _ref, _results,
        _this = this;
      this.updateFeedList();
      this.itens = [];
      _ref = this.feeds;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        _results.push((function(f) {
          return new Feed(f, _this.feedCallback);
        })(f));
      }
      return _results;
    };

    App.prototype.feedCallback = function(feed) {
      var i, ordenedFeeds, _fn, _i, _len, _ref,
        _this = this;
      _ref = feed.itens;
      _fn = function(i) {
        return _this.itens.push(i);
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _fn(i);
      }
      this.feedsLoaded += 1;
      if (this.feedsLoaded === this.feedsToLoad) {
        ordenedFeeds = this.itens.sort(function(a, b) {
          return b.pubDate.getTime() - a.pubDate.getTime();
        });
        if (ordenedFeeds.length > 0) {
          return FeedsBean.readPosts(this.conferePosts, ordenedFeeds);
        }
      }
    };

    App.prototype.conferePosts = function(oldItens, newItens) {
      var i, item, itens, _fn, _fn1, _i, _j, _len, _len1,
        _this = this;
      if (oldItens.length === 0) {
        FeedsBean.insertPosts(newItens);
        return;
      }
      itens = [];
      _fn = function(item) {
        var itemB, notinList, _fn1, _j, _len1;
        notinList = true;
        _fn1 = function(itemB) {
          if (item.title === itemB.title) {
            return notinList = false;
          }
        };
        for (_j = 0, _len1 = oldItens.length; _j < _len1; _j++) {
          itemB = oldItens[_j];
          _fn1(itemB);
        }
        if (notinList) {
          return itens.push(item);
        }
      };
      for (_i = 0, _len = newItens.length; _i < _len; _i++) {
        item = newItens[_i];
        _fn(item);
      }
      if (itens.length > 0) {
        console.log(itens.length);
        console.log(itens[0].title);
        i = oldItens.length + 1;
        _fn1 = function(item) {
          FeedsBean.addPost(i, item);
          return i += 1;
        };
        for (_j = 0, _len1 = itens.length; _j < _len1; _j++) {
          item = itens[_j];
          _fn1(item);
        }
      }
      return FeedsBean.getDuplicate(this.confereDuplicados);
    };

    App.prototype.confereDuplicados = function(tx, result) {
      var i, lastPubDate, _i, _ref, _results,
        _this = this;
      if (result.rows.length > 0) {
        lastPubDate = 0;
        _results = [];
        for (i = _i = 0, _ref = result.rows.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function(i) {
            var item;
            item = result.rows.item(i);
            if (item.pubDate === lastPubDate) {
              FeedsBean.deleteEntry(item._id);
            }
            if (item.pubDate !== lastPubDate) {
              return lastPubDate = item.pubDate;
            }
          })(i));
        }
        return _results;
      }
    };

    App.prototype.onInit = function() {
      this.db = new DataBase();
      console.log("init app");
      this.scheduleRequest(this.tdelay);
      FeedsBean.getFeedsNaoLidos();
      return this.run();
    };

    App.prototype.onAlarm = function(alarm) {
      if (alarm && alarm.name === 'watchdog') {
        this.onWatchdog();
      } else {
        this.scheduleRequest(this.tdelay);
      }
      console.log("obter");
      return this.run();
    };

    App.prototype.onWatchdog = function() {
      var _this = this;
      return chrome.alarms.get('refresh', function(alarm) {
        if (alarm === void 0 || alarm === null) {
          return _this.scheduleRequest(_this.tdelay);
        }
      });
    };

    return App;

  })(GoogleChromeApp);

  Popup = (function() {

    function Popup(local) {
      this.thePost = __bind(this.thePost, this);

      this.showPosts = __bind(this.showPosts, this);

      this.show = __bind(this.show, this);
      this.db = new DataBase();
      if (!local) {
        chrome.browserAction.setPopup({
          popup: "popup.html"
        });
      } else {
        this.list = $("#posts");
        FeedsBean.readPosts(this.showPosts);
      }
    }

    Popup.prototype.show = function(tab) {
      return chrome.browserAction.setPopup({
        popup: "popup.html"
      });
    };

    Popup.prototype.showPosts = function(posts) {
      var post, _fn, _i, _len,
        _this = this;
      chrome.runtime.sendMessage({
        action: "g_markAllAsARead"
      });
      this.list.children().remove();
      _fn = function(post) {
        return _this.list.append(_this.thePost(post));
      };
      for (_i = 0, _len = posts.length; _i < _len; _i++) {
        post = posts[_i];
        _fn(post);
      }
      if (this.list.mCustomScrollbar !== void 0) {
        this.list.mCustomScrollbar({
          theme: "light-2",
          mouseWheel: true,
          scrollButtons: {
            enable: false
          }
        });
      }
      window._globalList = this.list;
      return $("article img").each(function(e) {
        return this.onload = function(e) {
          return window._globalList.mCustomScrollbar("update");
        };
      });
    };

    Popup.prototype.thePost = function(post) {
      var img, link, title, words;
      link = '<a href="' + post.link + '" target="_blank" >';
      img = '<img src="' + post.image + '" alt="' + post.title + '" title="' + post.title + '" />';
      title = '<h4>' + post.title + '</h4>';
      words = post.description.replace(/(<([^>]+)>)/ig, "").replace(/\s{2,}/ig, "").split(" ", 32).join(" ") + "...";
      return '<article>' + link + img + '</a><br />' + title + words + '<footer></footer></article>';
    };

    return Popup;

  })();

  Options = (function() {

    function Options() {
      this.updateDatabase = __bind(this.updateDatabase, this);

      this.init = __bind(this.init, this);

      var _this = this;
      this.moreFeeds = $('#moreFeeds');
      this.maxFeeds = $('#maxFeeds');
      this.db = new DataBase();
      this.maxFeeds.keyup(function(e) {
        _this.updateDatabase();
        return true;
      });
      this.moreFeeds.keyup(this.updateDatabase);
      AccessBean.getData(this.init);
    }

    Options.prototype.init = function() {
      this.moreFeeds.val(Access.fontesDeFeeds);
      return this.maxFeeds.val(Access.maxFeeds);
    };

    Options.prototype.updateDatabase = function(e) {
      var maxFeeds, moreFeeds;
      moreFeeds = this.moreFeeds.val();
      maxFeeds = parseInt(this.maxFeeds.val());
      return AccessBean.saveAccess(moreFeeds, maxFeeds);
    };

    return Options;

  })();

  $(function() {
    try {
      if (String(window.location).indexOf("mainPage.html") > -1) {
        icon = new Icon();
        return app = new App();
      } else {
        if (String(window.location).indexOf("options.html") > -1) {
          return new Options();
        } else {
          return app = new Popup(true);
        }
      }
    } catch (error) {
      console.log("alternativo " + error.message);
      return app = new Popup(true);
    }
  });

}).call(this);
